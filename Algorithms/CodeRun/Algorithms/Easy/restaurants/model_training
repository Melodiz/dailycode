import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split, GridSearchCV
import joblib

def load_training_data(file_path):
    data = []
    with open(file_path, 'r') as file:
        for line in file:
            winner, r1, r2, d1, d2 = map(float, line.strip().split('\t'))
            data.append((winner, r1, r2, d1, d2))
    return data

def train_model(training_data):
    X = []
    y = []
    for winner, r1, r2, d1, d2 in training_data:
        if winner != 0.5:  # Ignore ties for training
            if winner == 0:
                X.append([r1, d1])
                y.append(1)
                X.append([r2, d2])
                y.append(0)
            else:
                X.append([r1, d1])
                y.append(0)
                X.append([r2, d2])
                y.append(1)
    X = np.array(X)
    y = np.array(y)
    
    # Split the data into training and validation sets
    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # Define the model
    model = RandomForestRegressor(random_state=42)
    
    # Define the parameter grid
    param_grid = {
        'n_estimators': [100, 200],
        'max_depth': [None, 10, 20],
        'min_samples_split': [2, 5],
        'min_samples_leaf': [1, 2]
    }
    
    # Perform grid search
    grid_search = GridSearchCV(model, param_grid, cv=5, scoring='neg_mean_squared_error')
    grid_search.fit(X_train, y_train)
    
    # Print the best parameters
    print("Best parameters:", grid_search.best_params_)
    
    # Train the final model with the best parameters
    best_model = grid_search.best_estimator_
    best_model.fit(X_train, y_train)
    
    # Evaluate the model on the validation set
    val_predictions = best_model.predict(X_val)
    val_mse = np.mean((val_predictions - y_val) ** 2)
    print("Validation MSE:", val_mse)
    
    return best_model

def main():
    training_data = load_training_data('restaurants_train.txt')
    model = train_model(training_data)
    joblib.dump(model, 'restaurant_model.pkl')
    print("Model trained and saved to restaurant_model.pkl")

if __name__ == "__main__":
    main()